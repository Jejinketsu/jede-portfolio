---
import "../styles/global.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
  ogImageUrl?: string | undefined;
  info?: {
    name: string;
    baseUrl: string;
  };
}

const {
  title = "Jederilson S. Luz: Personal Site",
  description = "I'm a Software Engineer with an emphasis on mobile using React Native",
  ogImageUrl = "/assets/portrait.jpg",
  info = {
    baseUrl: "https://jederilson.dev",
    name: "Jederilson S. Luz",
  },
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<!-- Primary Meta Tags -->
{
  title && (
    <link rel="canonical" href={`${info.baseUrl}${Astro.url.pathname}`} />
  )
}
{title && <title>{`${title} - ${info.name}`}</title>}
{title && <meta name="title" content={`${title} - ${info.name}`} />}
{description && <meta name="description" content={description} />}

<!-- Open Graph / Facebook -->
{title && <meta property="og:type" content="website" />}
{
  title && (
    <meta property="og:url" content={`${info.baseUrl}${Astro.url.pathname}`} />
  )
}
{title && <meta property="og:title" content={`${title} - ${info.name}`} />}
{description && <meta property="og:description" content={description} />}
{
  ogImageUrl && (
    <meta property="og:image" content={`${info.baseUrl}${ogImageUrl}`} />
  )
}

<!-- Twitter -->
{title && <meta property="twitter:card" content="summary_large_image" />}
{
  title && (
    <meta
      property="twitter:url"
      content={`${info.baseUrl}${Astro.url.pathname}`}
    />
  )
}
{title && <meta property="twitter:title" content={`${title} - ${info.name}`} />}
{description && <meta property="twitter:description" content={description} />}
{
  ogImageUrl && (
    <meta property="twitter:image" content={`${info.baseUrl}${ogImageUrl}`} />
  )
}

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
  rel="stylesheet"
/>
<script is:inline>
// This code is inlined in the head to make dark mode instant & blocking.
const getThemePreference = () => {
	if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
		return localStorage.getItem("theme");
	}
	return window.matchMedia("(prefers-color-scheme: dark)").matches
		? "dark"
		: "light";
};
const isDark = getThemePreference() === "dark";
document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

if (typeof localStorage !== "undefined") {
	// Watch the document element and persist user preference when it changes.
	const observer = new MutationObserver(() => {
		const isDark = document.documentElement.classList.contains("theme-dark");
		localStorage.setItem("theme", isDark ? "dark" : "light");
	});
	observer.observe(document.documentElement, {
		attributes: true,
		attributeFilter: ["class"],
	});
}
</script>
